#! /usr/bin/env perl
use strict;
use warnings;

BEGIN {
  # Taint.  /usr/bin/env can't do it for us.
#  use FindBin; unshift @INC, "$FindBin::RealBin/../lib" unless ${^TAINT}; # for run-from-clone
  exec $^X, (map {( -I => $_)} @INC), -T => $0, @ARGV unless ${^TAINT};
  foreach ($0, @ARGV) { ($_) = /^(.*)$/ } # bulk untaint of trusted environment
}

use Plack::Runner;
use Plack::Builder;
use Plack::App::Directory;

use Plack::MiddlewareX::PreZipped;
use Plack::MiddlewareX::HttpRangeBytes;
use Plack::App::Debug::Snore;
use Plack::App::PerfTest;


=head1 NAME

plack_serve - serve a directory of static files using Plack

=head1 SYNOPSIS

 $ plack_serve ~/www/site
 HTTP::Server::PSGI: Accepting connections at http://0:5000/
 [... access_log follows ...]

=head1 DESCRIPTION

This is a basic server for static files, implemented with pieces of
L<Plack> and two extra L<Plack::Middleware> modules to deal with
pre-zipped content and byte-range requests.

It is enough to serve L<JBrowse|http://jbrowse.org/> v1.11.6 as I had
it configured.

=head1 CAVEATS

This code is a quick bodge.

=head1 LICENCE

 This file is part of plack-middlewares-jbrowse which extends Plack to
 support the needs of JBrowse.

 Copyright (c) 2015 Genome Research Ltd.

 Author: Matthew Astley <mca@sanger.ac.uk>

 This program is free software: you can redistribute it and/or modify it
 under the terms of the GNU Affero General Public License as published by
 the Free Software Foundation, either version 3 of the License, or (at your
 option) any later version.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
 License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut


sub main {
  $SIG{INT} = sub { die "Caught SIGINT\n" };

  # app.psgi
  my ($root) = (shift @ARGV) =~ /^(.*)$/;  # untaint - we trust ARGV
  die "Syntax: $0 <webroot-dir> [... plackup args ]\n\nServe a directory via plackup.  root=$root\n"
    unless defined $root && -d $root && -r _;
  my $content = Plack::App::Directory->new({ root => $root })->to_app;

  # headers for pre-compressed files
  my $app = builder {
    # outermost = first call pre-response, last chance post-response

    # based on http://stackoverflow.com/questions/3354208/uri-for-includes-port-number-on-redirects/3354815#3354815
    enable_if { $_[0]->{REMOTE_ADDR} eq '127.0.0.1' && $_[0]->{HTTP_X_FORWARDED_SCRIPT_NAME} }
      "Plack::Middleware::ReverseProxyPath";
    enable_if { $_[0]->{REMOTE_ADDR} eq '127.0.0.1' && $_[0]->{HTTP_X_FORWARDED_SCRIPT_NAME} }
      "Plack::Middleware::ReverseProxy";

    mount "/perftest" => Plack::App::PerfTest->new->to_app;
    mount "/sleep/" => Plack::App::Debug::Snore->new->to_app;
    enable 'Plack::MiddlewareX::PreZipped';
    enable 'Plack::MiddlewareX::HttpRangeBytes';
    mount '/' => $content;
    # innermost = does its stuff, for the middlewares pre/post filter
  };

  # bin/plackup
  my $runner = Plack::Runner->new(app => $app);
  $runner->parse_options(@ARGV);
  $runner->run;

  return 0;
}

exit main();
